---
version: 2.1

orbs:
  win: circleci/windows@2.2.0
  sfchangecase: salesforce/change-case-management@3
  slack: circleci/slack@3.4.2

parameters:
  publish:
    type: boolean
    default: false
  publish-type:
    type: string
    default: patch

_refs:
  defaults: &defaults
    working_directory: ~/cli
    docker:
      - image: node:12
  ssh-config: &ssh-config
    fingerprints:
      - '1d:a9:9c:29:62:13:c9:db:f6:df:06:89:02:24:40:4a'
  restore_cache: &restore_cache
    keys:
      - v1-npm-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
      - v1-npm-{{checksum ".circleci/config.yml"}}
  gh-config: &gh-config
    name: Configuring GitHub
    command: |
      git config credential.helper 'cache --timeout=120'
      git config user.email "$GH_EMAIL"
      git config user.name "Release Bot"
  lint: &lint
    name: Lint source files
    command: yarn lint
  install: &install
    name: Install dependencies
    command: |
      yarn --version
      node --version
      yarn
  build: &build
    name: Build project
    command: yarn build
  test: &test
    name: Run tests
    command: yarn test
  coverage: &coverage
    name: Upload coverage to codecov.io
    command: |
      ./node_modules/nyc/bin/nyc.js report --reporter=lcov
      node ./scripts/uploadCodeCoverage.js
  gus-prepare-environment-variables: &gus-prepare-environment-variables
    name: 'Prepare environment variables for GUS Change Case Management'
    command: |
      export GUS_BUILD="$(node -pe "require('./package.json').gusBuild")"
      echo "export GUS_RELEASE=offcore.tooling.$GUS_BUILD" >> $BASH_ENV

commands:
  build-artifact:
    steps: 
      - run:
          name: Archiving tarball
          command: |
            yarn pack
            mkdir artifact
            find . -name "*.tgz" -type f -exec cp {} ./artifact \;
      - store_artifacts:
          path: ./artifact
jobs:
  node-latest: &node-test
    docker:
      - image: node:latest
    working_directory: ~/cli
    steps:
      - checkout
      - restore_cache: *restore_cache
      - run: *install
      - run: *lint
      - run: *build
      - run: *test
      - run: *coverage
      - store_test_results:
          path: test-results
      - build-artifact
  node-12:
    <<: *node-test
    docker:
      - image: node:12
  cache:
    <<: *node-test
    steps:
      - checkout
      - run: *install
      - save_cache:
          key: v1-npm-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
          paths:
            - ~/cli/node_modules
            - /usr/local/share/.cache/yarn
            - /usr/local/share/.config/yarn
  run-win-tests:
    description: 'Run tests on Windows'
    executor: win/default
    steps:
      - run: git config --global core.autocrlf false
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-win1-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
            # if cache for exact version of 'package.json' is not present, then load the most recent cache
            - dependency-cache-win1-
      - run: *install
      - save_cache:
          key: dependency-cache-win1-{{checksum ".circleci/config.yml"}}-{{checksum "yarn.lock"}}
          paths:
            - node_modules
      - run: *lint
      - run: *build
      - run: *test
      - run:
          <<: *coverage
          shell: bash.exe
      - store_test_results:
          path: test-results
  publish:
    <<: *defaults
    steps:
      - slack/notify:
          channel: 'pdt_releases'
          color: '#FFDEAD'
          message: 'Starting Publish for SDR Library'
      - add_ssh_keys: *ssh-config
      - checkout
      - restore_cache: *restore_cache
      - run: *gh-config
      - run: *install
      - sfchangecase/install
      - run: *gus-prepare-environment-variables
      - sfchangecase/create:
          location: REPO_LOCATION
          release: GUS_RELEASE
      - sfchangecase/check:
          location: REPO_LOCATION
          release: GUS_RELEASE
      - run: *build
      - run:
          name: Bump package version
          command: |
            yarn version --<< pipeline.parameters.publish-type >> --no-git-tag-version
            git add package.json
            export RELEASE_TAG="$(node -pe "require('./package.json').version")"
            echo "export RELEASE_VERSION=$RELEASE_TAG" >> $BASH_ENV
            source $BASH_ENV
            git commit -m "chore: updated version $RELEASE_TAG"
      - run:
          name: Set .npmrc
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: yarn publish --non-interactive
      - run: git push origin main
      - run:
          name: Tag the release and push to repo
          command: |
            git tag v${RELEASE_VERSION}
            git push --tags
      - sfchangecase/update:
          location: REPO_LOCATION
          release: GUS_RELEASE
      - slack/notify:
          channel: 'pdt_releases'
          color: '#9bcd9b'
          message: 'SDR Library v${RELEASE_VERSION} has been published to npm'
      - slack/status:
          channel: 'pdt_releases'
          fail_only: true

workflows:
  version: 2.1

  commit-workflow:
    unless: << pipeline.parameters.publish >>
    jobs:
      - node-latest
      - node-12
      - cache:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - run-win-tests

  publish-workflow:
      when: << pipeline.parameters.publish >>
      jobs:
        - slack/approval-notification:
            message: Pending Approval for Publish of SDRL (Source Deploy Retrieve Library)
            channel: 'pdt_releases'
            color: '#0E1111'
        - node-latest
        - node-12
        - run-win-tests
        - hold: # Requires manual approval in Circle Ci
            type: approval
        - publish:
            context: pdt-publish-restricted-context
            filters:
              branches:
                only:
                  - main
            requires:
              - node-latest
              - node-12
              - run-win-tests
              - hold
