version: 2.1
orbs:
  release-management: salesforce/npm-release-management@4

jobs:
  registry-check:
    description: Checks registry against metadataCoverageReport
    docker:
      - image: node:lts
    steps:
      - checkout
      - run: yarn install
      - run: yarn build
      - run: yarn test:registry

  registry-check-preview:
    description: Checks registry against next version of metadataCoverageReport, reporting results to slack
    docker:
      - image: node:lts
    steps:
      - checkout
      - run: yarn install
      - run: yarn build
      - run: yarn metadata:preview

  external-nut:
    description: Runs NUTs from other (external) repos by cloning them.  Substitutes a dependency for the current pull request.  For example, you're testing a PR to a library and want to test a plugin in another repo that uses the library.

    parameters:
      test_command:
        type: string
        description: 'command to execute (ex: yarn test:nuts)'
        default: 'yarn test:nuts'
      node_version:
        description: version of node to run tests against
        type: string
        default: 'lts'
      os:
        description: operating system to run tests on
        type: enum
        enum: ['linux', 'windows']
        default: 'linux'
      sfdx_version:
        description: 'By default, the latest version of the standalone CLI will be installed. To install via npm, supply a version tag such as "latest" or "6".'
        default: ''
        type: string
      sfdx_executable_path:
        description: "Path to sfdx executable to be used by NUTs, defaults to ''"
        default: ''
        type: string
      external_project_git_url:
        description: 'The url that will be cloned.  This contains the NUTs you want to run.  Ex: https://github.com/salesforcecli/plugin-user'
        type: string
        default: ''
      size:
        type: enum
        description: |
          The size of machine resource to use. Defaults to medium.
        default: medium
        enum:
          - medium
          - large
          - xlarge
          - 2xlarge

    executor:
      name: release-management/<< parameters.os >>
      size: << parameters.size >>

    environment:
      TESTKIT_EXECUTABLE_PATH: <<parameters.sfdx_executable_path>>

    steps:
      - release-management/install-node:
          version: <<parameters.node_version>>
          os: <<parameters.os>>
      - release-management/install-sfdx:
          version: <<parameters.sfdx_version>>
          os: <<parameters.os>>
      - run: git clone <<parameters.external_project_git_url>> $(pwd)
      - run:
          name: Install dependencies
          command: yarn
      - run: yarn remove @salesforce/source-deploy-retrieve
      # windows/powershell does envs differently so we have to have conditional steps
      - when:
          condition:
            equal: ['windows', <<parameters.os>>]
          steps:
            - run: yarn add $env:CIRCLE_PROJECT_USERNAME/$env:CIRCLE_PROJECT_REPONAME#$env:CIRCLE_SHA1
      - when:
          condition:
            equal: ['linux', <<parameters.os>>]
          steps:
            - run: yarn add $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME#$CIRCLE_SHA1
      - run:
          # STL could also have an SDR inside it.  Take it out to prevent conflicts
          name: remove sdr from source-tracking
          command: |
            npm install shx -g
            shx rm -rf node_modules/@salesforce/source-deploy-retrieve
          working_directory: node_modules/@salesforce/source-tracking
      - run:
          name: install/build <<parameters.external_project_git_url>> in node_modules
          # why doesn't SDR put the metadataRegistry.json in the lib when run from inside a node module?  I don't know.
          # prevent dependency conflicts between plugin's top-level imports and imported SDR's deps by deleting them
          # If there are real conflicts, we'll catch them when bumping a version in the plugin (same nuts)
          command: |
            yarn install
            shx rm -rf node_modules/@salesforce/kit
            shx rm -rf node_modules/@typescript-eslint
            shx rm -rf node_modules/eslint-plugin-header
            shx rm -rf node_modules/eslint-plugin-import
            shx rm -rf node_modules/eslint-plugin-jsdoc
            shx rm -rf node_modules/eslint-plugin-prettier
            yarn build
            cp src/registry/metadataRegistry.json lib/src/registry
          working_directory: node_modules/@salesforce/source-deploy-retrieve
      - run:
          name: clean SDR from source-tracking
          working_directory: node_modules/@salesforce/source-tracking
          command: shx rm -rf node_modules/@salesforce/source-deploy-retrieve
      - run:
          name: Build the external project
          command: |
            yarn build
      - run:
          name: Nuts
          no_output_timeout: 20m
          command: |
            <<parameters.test_command>>

workflows:
  version: 2
  registry-check-preview:
    triggers:
      - schedule:
          # weekly on Monday morning
          cron: 30 3 * * 1
          filters:
            branches:
              only:
                - main
    jobs:
      - registry-check-preview:
          # required for slack webhook
          context: salesforce-cli
  registry-check:
    triggers:
      - schedule:
          # early in the morning (cron is GMT)
          cron: 8 22 * * *
          filters:
            branches:
              only:
                - main
    jobs:
      - registry-check
  test-and-release:
    jobs:
      - release-management/validate-pr:
          filters:
            branches:
              ignore: main
      - release-management/test-package:
          matrix:
            parameters:
              os:
                - linux
                - windows
              node_version:
                - latest
                - lts
                - maintenance
            exclude:
              - os: windows
                node_version: latest
              - os: windows
                node_version: maintenance
      - release-management/test-nut:
          name: nuts-on-linux
          sfdx_version: latest
          node_version: lts
          size: large
          # git config so it can push without --set-upstream
          command: 'git config --global push.default current; git config --global user.email alm-cli@salesforce.com;  yarn test:nuts:scale:record'
          os: linux
      # I wish we could *also* record the CI perf for windows, but I can't figure out the syntax
      # until then, run as a separate job to test scaling for larger repos
      - release-management/test-nut:
          name: nuts-on-windows
          sfdx_version: latest
          node_version: lts
          size: large
          command: 'yarn test:nuts:scale'
          os: windows
          filters:
            branches:
              ignore: main
      - external-nut:
          filters:
            branches:
              # we don't run again on main because
              # 1) we already ran on a branch
              # 2) they aren't required and would run in parallel to release job
              ignore: main
          requires:
            - release-management/test-package
            # commented out until the windows EMFILE is fixed.  This lets us know when it's fixed and prevents future regressions
            # - release-management/test-nut
          sfdx_version: latest
          size: medium
          matrix:
            parameters:
              os: [windows, linux]
              node_version: [lts]
              external_project_git_url: ['https://github.com/salesforcecli/plugin-source']
              test_command: [
                  'yarn test:nuts:convert',
                  'yarn test:nuts:delete',
                  'yarn test:nuts:deploy',
                  # TODO: restore after https://github.com/salesforcecli/plugin-source/pull/515
                  # 'yarn test:nuts:deploy:async',
                  'yarn test:nuts:manifest:create',
                  'yarn test:nuts:mdapi',
                  'yarn test:nuts:retrieve',
                  'yarn test:nuts:specialTypes',
                  'yarn test:nuts:tracking',
                ]
          context:
            - salesforce-cli-na40-auth-url
      - release-management/release-package:
          github-release: true
          post-job-steps:
            - when: on_success
            - run: yarn ci-docs
          requires:
            - release-management/test-package
          filters:
            branches:
              only: main
          context:
            - CLI_CTC
            - salesforce-cli
  dependabot-automerge:
    triggers:
      - schedule:
          cron: '0 2,5,8,11 * * *'
          filters:
            branches:
              only:
                - main
    jobs:
      - release-management/dependabot-automerge:
          merge-method: squash
          context: salesforce-cli
